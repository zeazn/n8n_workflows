{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "content": "## PDF Document Processing Workflow\n\n**Purpose:** Automatically process PDF documents uploaded to the \"Incoming\" folder\n\n**Data Extracted:**\n- Processed Date (when workflow ran)\n- Document Type (Tax Invoice, Delivery Docket, PO Reprint)\n- Document Date (from the document)\n- Purchase Order Number\n- Vendor Name\n\n**Flow:**\n1. Monitor \"Incoming\" folder for new PDFs\n2. Download and extract text from PDF\n3. Use ChatGPT to identify and extract key data\n4. Save extracted data to \"Invoices\" spreadsheet\n5. Move processed PDF to \"Processed\" folder\n\n**Required Setup:**\n- Replace INCOMING_FOLDER_ID with your actual folder ID\n- Replace PROCESSED_FOLDER_ID with your actual folder ID  \n- Replace INVOICES_SPREADSHEET_ID with your actual spreadsheet ID\n- Configure Google Drive and OpenAI credentials\n- Ensure \"Invoices\" spreadsheet has proper headers",
        "height": 464,
        "width": 389
      },
      "id": "383229c3-8040-40fd-97ca-0ea70743253c",
      "name": "Workflow Documentation1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1700,
        580
      ]
    },
    {
      "parameters": {
        "content": "## Setup Instructions\n\n**Step 1:** Get your folder IDs from Google Drive URLs:\n- Incoming folder: Open folder, copy ID from URL\n- Processed folder: Open folder, copy ID from URL\n\n**Step 2:** Get your spreadsheet ID:\n- Open \"Invoices\" Google Sheet\n- Copy ID from URL (between /d/ and /edit)\n\n**Step 3:** Add these headers to your spreadsheet:\n- A1: processedDate\n- B1: documentType  \n- C1: documentDate\n- D1: purchaseOrderNumber\n- E1: vendorName\n- F1: originalFileName\n\n**Step 4:** Configure credentials:\n- Google Drive account\n- OpenAI API key",
        "height": 464,
        "width": 389
      },
      "id": "ab1f2730-7c14-45d3-ae28-79737e9c6157",
      "name": "Setup Instructions1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2560,
        580
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "mode": "id",
          "value": "INCOMING_FOLDER_ID"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "c7197bdb-eda0-430f-af19-f02af083aef1",
      "name": "Monitor Incoming Folder",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        1700,
        380
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "id_google_drive",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{ $json.id }}",
        "options": {}
      },
      "id": "430ffc5a-531c-486d-99a0-9036480c4230",
      "name": "Download PDF",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1920,
        380
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "id_google_drive",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process extracted data and add metadata\nconst chatResponse = $input.first().json.message.content;\n\ntry {\n  // Parse the JSON response from ChatGPT\n  const extractedData = JSON.parse(chatResponse);\n  \n  // Get original file info\n  const originalFile = $('Monitor Incoming Folder').first().json;\n  \n  // Add processed date and prepare final data\n  const processedData = {\n    processedDate: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n    documentType: extractedData.documentType || 'Unknown',\n    documentDate: extractedData.documentDate || 'Not Found',\n    purchaseOrderNumber: extractedData.purchaseOrderNumber || 'Not Found',\n    vendorName: extractedData.vendorName || 'Not Found',\n    originalFileName: originalFile.name,\n    fileId: originalFile.id\n  };\n  \n  return [{ json: processedData }];\n  \n} catch (error) {\n  // If parsing fails, create error record\n  const originalFile = $('Monitor Incoming Folder').first().json;\n  \n  return [{\n    json: {\n      processedDate: new Date().toISOString().split('T')[0],\n      documentType: 'ERROR',\n      documentDate: 'Parse Error',\n      purchaseOrderNumber: 'Parse Error',\n      vendorName: 'Parse Error',\n      originalFileName: originalFile.name,\n      fileId: originalFile.id,\n      errorMessage: error.message,\n      rawResponse: chatResponse\n    }\n  }];\n}"
      },
      "id": "ddd57b11-a8da-4650-af57-316ff30cbec3",
      "name": "Process Extracted Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        600
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "You are a document data extraction specialist. Extract ONLY real data from the provided document text. Never create fake or placeholder data.",
              "role": "system"
            },
            {
              "content": "Extract the following data from this document text:\n\n1. DOCUMENT TYPE: Identify if this is a \"Tax Invoice\", \"Delivery Docket\", or \"PO Reprint\"\n2. DOCUMENT DATE: Find the main date on the document (delivery date, invoice date, etc.)\n3. PURCHASE ORDER NUMBER: Look for PO numbers, customer order numbers, or order references\n4. VENDOR NAME: Find the company/supplier name (usually at the top)\n\nDocument text:\n{{ $json.text }}\n\nReturn ONLY valid JSON in this exact format:\n{\n  \"documentType\": \"actual document type from text\",\n  \"documentDate\": \"actual date from text\",\n  \"purchaseOrderNumber\": \"actual PO number from text\", \n  \"vendorName\": \"actual vendor name from text\"\n}\n\nIMPORTANT: Use ONLY data that actually appears in the document text. If a field cannot be found, use null."
            }
          ]
        },
        "options": {
          "temperature": 0.1
        }
      },
      "id": "e40ff31c-c71f-4a2a-b670-faef593161f0",
      "name": "Extract Data with ChatGPT",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [
        2140,
        380
      ],
      "credentials": {
        "openAiApi": {
          "id": "id_chatgpt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/INVOICES_SPREADSHEET_ID/edit",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "processedDate",
              "displayName": "processedDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "documentDate",
              "displayName": "documentDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "purchaseOrderNumber",
              "displayName": "purchaseOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "vendorName",
              "displayName": "vendorName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "originalFileName",
              "displayName": "originalFileName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false,
          "values": {
            "processedDate": "={{ $json.processedDate }}",
            "documentType": "={{ $json.documentType }}",
            "documentDate": "={{ $json.documentDate }}",
            "purchaseOrderNumber": "={{ $json.purchaseOrderNumber }}",
            "vendorName": "={{ $json.vendorName }}",
            "originalFileName": "={{ $json.originalFileName }}"
          }
        },
        "options": {}
      },
      "id": "220b7508-a2ed-4980-9136-6341672a2f7b",
      "name": "Add to Invoices Spreadsheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        2580,
        380
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "id_google_sheets",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": "={{ $json.fileId }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "MyDrive"
        },
        "folderId": {
          "__rl": true,
          "value": "PROCESSED_FOLDER_ID",
          "mode": "id"
        }
      },
      "id": "a310574e-4743-4442-a8b9-616120acaa6d",
      "name": "Move to Processed Folder",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2800,
        380
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "id_google_drive",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Debug: Check what text is extracted from PDF\nconsole.log(\"PDF Text Content:\", $json.text);\nconsole.log(\"Text length:\", $json.text ? $json.text.length : \"No text field\");\n\n// Also log the full JSON structure\nconsole.log(\"Full PDF data structure:\", Object.keys($json));\n\nreturn [$input.first()];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        240
      ],
      "id": "86e35a82-1532-482f-aeb4-d31040ace63d",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "Monitor Incoming Folder": {
      "main": [
        [
          {
            "node": "Download PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Extracted Data": {
      "main": [
        [
          {
            "node": "Add to Invoices Spreadsheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Data with ChatGPT": {
      "main": [
        [
          {
            "node": "Process Extracted Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Invoices Spreadsheet": {
      "main": [
        [
          {
            "node": "Move to Processed Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Extract Data with ChatGPT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "PLACEHOLDER_VERSION_ID",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "PLACEHOLDER_INSTANCE_ID"
  },
  "id": "PLACEHOLDER_WORKFLOW_ID",
  "tags": []
}